AWSTemplateFormatVersion : 2010-09-09
Parameters:
  ASGNames: 
    Type: String
    Description: Names space-separated of ASGs to start and stop
    Default: 'asg-name1 asg-name2'
  ASGMinSize: 
    Type: String
    Description: Minimum size of ASGs when starting
    Default: 1
  ASGMaxSize: 
    Type: String
    Description: Maximum size of ASGs when starting
    Default: 1
  ASGDesiredCapacity: 
    Type: String
    Description: Desired starting size of ASGs when starting
    Default: 1
Resources:
  LambdaScheduleStart:
    Type: "AWS::Events::Rule"
    Properties:
      Description: >
        Schedule for starting ASG instances at 6am every day
      ScheduleExpression: cron(0 6 ? * MON-FRI *)
      State: ENABLED
      Targets:
        - Arn: !Sub ${LambdaFunction.Arn}
          Id: LambdaSchedule
  LambdaScheduleStop:
    Type: "AWS::Events::Rule"
    Properties:
      Description: >
        Schedule for stopping ASG instances at 6pm every day
      ScheduleExpression: cron(0 18 ? * MON-FRI *)
      State: ENABLED
      Targets:
        - Arn: !Sub ${LambdaFunction.Arn}
          Id: LambdaSchedule
  LambdaScheduleStartPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${LambdaFunction.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${LambdaScheduleStart.Arn}
  LambdaScheduleStopPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub ${LambdaFunction.Arn}
      Principal: 'events.amazonaws.com'
      SourceArn: !Sub ${LambdaScheduleStop.Arn}
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: /
      Policies: 
      - PolicyName: autoscaling
        PolicyDocument: 
          Statement: 
          - Effect: Allow
            Action: 
            - autoscaling:UpdateAutoScalingGroup
            - autoscaling:DescribeAutoScalingGroups
            - autoscaling:PutScalingPolicy
            - autoscaling:DescribePolicies
            Resource: '*'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import os
          import boto3
          client = boto3.client('autoscaling')
          def get_env_variable(var_name):
              msg = "Set the %s environment variable"
              try:
                  return os.environ[var_name]
              except KeyError:
                  error_msg = msg % var_name
          def lambda_handler(event, context):
              auto_scaling_groups = get_env_variable('NAMES').split()
              for group in auto_scaling_groups:
                  if servers_need_to_be_started(group):
                      action = "Starting"
                      min_size = int(get_env_variable('MIN_SIZE'))
                      max_size = int(get_env_variable('MAX_SIZE'))
                      desired_capacity = int(get_env_variable('DESIRED_CAPACITY'))
                  else:
                      action = "Stopping"
                      min_size = 0
                      max_size = 0
                      desired_capacity = 0
                  print action + ": " + group
                  response = client.update_auto_scaling_group(
                      AutoScalingGroupName=group,
                      MinSize=min_size,
                      MaxSize=max_size,
                      DesiredCapacity=desired_capacity,
                  )
                  print response
          def servers_need_to_be_started(group_name):
              min_group_size = get_current_min_group_size(group_name)
              if min_group_size == 0:
                  return True
              else:
                  return False
          def get_current_min_group_size(group_name):
              response = client.describe_auto_scaling_groups(
                  AutoScalingGroupNames=[ group_name ],
              )
              return response["AutoScalingGroups"][0]["MinSize"]
      Handler: index.checkPortOpen
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python2.7
      Timeout: 60
      MemorySize: 128
      Environment:
        Variables:
          NAMES: !Ref ASGNames
          MIN_SIZE: !Ref ASGMinSize
          MAX_SIZE: !Ref ASGMaxSize
          DESIRED_CAPACITY: !Ref ASGDesiredCapacity